#!/bin/bash
set -e

if [ ! -f status.cfg ]; then
  echo "No config found"
  exit 0
fi

# Create curlrc config file in temporary location
curlrc=$(mktemp)
cat > "$curlrc" << 'EOF'
--retry 5
--retry-delay 5
--retry-all-errors
--fail
--parallel
--silent
--output /dev/null
--expand-write-out "%output{>>log.csv}{{id}},{{date}},%{http_code}\n"
EOF

curl_args=()
url_count=0
while IFS= read -r line || [[ -n $line ]]; do
  if [[ -z $line || $line == \#* ]]; then continue; fi
  read -r id url rest <<< "$line"
  if [[ -z $id || -z $url ]]; then continue; fi
  url_count=$((url_count + 1))
  if [[ ${#curl_args[@]} -gt 0 ]]; then curl_args+=("--next"); fi
  curl_args+=("--variable" "id=${id}" "--config" "$curlrc" "$url")

  # eval needed to properly parse curl arguments with quotes (JSON data)
  if [[ -n $rest ]]; then eval "curl_args+=($rest)"; fi
done < status.cfg

if git ls-remote --exit-code --heads origin log > /dev/null; then
  git fetch origin log:log
  git switch log
else
  git switch --orphan log
fi

curl_exit_code=0
if [[ ${#curl_args[@]} -gt 0 ]]; then
  curl --variable date="$(date '+%Y-%m-%d %H:%M')" "${curl_args[@]}" || curl_exit_code=$?
fi

if [[ $url_count -gt 0 && -f log.csv ]]; then
  lines_to_keep=$((url_count * 8640))
  tail -n "$lines_to_keep" log.csv > log.csv.tmp && mv log.csv.tmp log.csv
fi

# Clean up temporary file
rm "$curlrc"

exit $curl_exit_code 